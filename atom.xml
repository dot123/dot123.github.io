<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DOT123&#39;S BLOG</title>
  
  <subtitle>是时候表演真正的技术了</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://g.cocos.dev/"/>
  <updated>2022-01-20T14:16:02.709Z</updated>
  <id>https://g.cocos.dev/</id>
  
  <author>
    <name>dot123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CocosCreator性能优化</title>
    <link href="https://g.cocos.dev/posts/60909/"/>
    <id>https://g.cocos.dev/posts/60909/</id>
    <published>2019-09-21T07:10:01.000Z</published>
    <updated>2022-01-20T14:16:02.709Z</updated>
    
    <content type="html"><![CDATA[<p>1.H5网页性能优化web服务开启gzip压缩，使用cnd加速下载。</p><p>2.原生平台性能优化使用CocosCreator自带的自动图集配置，安卓使用Etc2格式，iOS使用PVRTC格式，能大幅度优化图片加载速度和内存占用。</p><p>3.将频繁创建的对象使用对象池。</p><p>4.Label使用BMFont或CHAR模式。</p><p>5.减少粒子使用。</p><p>6.多个使用相同图片（图集）的Sprite对象在同一节点下按顺序排列不要交叉其他图片（图集）的Sprite，否则draw call被打断，draw call上升。</p><p>7.使用Mask组件会打断draw call。</p><p>8.贴图内存管理把所有贴图统一管理生命周期根据设备内存大小，分别设置贴图GC的阈值当贴图使用量超过GC阈值的时候，根据引用计数释放没用到的纹理，分帧清理，不卡顿。</p><p>9.使用动态合图cc.dynamicAtlasManager。</p><p>10.修改render-flow.js使其相同精灵的节点按顺序依次渲染（动态合批）。</p><p>11.分帧创建节点。</p><p>12.当节点透明度为0时不会渲染，子节点也不会渲染（Cocos Creator 2.13）。</p><p>13.动静分离节点。</p><p>14.动态树检测技能伤害、AI跳帧执行、伤害帧跳帧检测、伤害飘字合批、在update中不使用cc.v2类似这种创建对象的函数防止gc。</p><p>15.预先计算spine动画缓存和提前加载所使用到的资源。</p><p>###参考文档</p><p>支持 Texture Packer 的 Polygon outline 裁剪，使用 Polygon outline 裁剪后的图集将对每个小图按透明区域精确裁剪为不规则的多边形，将达到类似 Smash Texture 节省图片空间的效果，对渲染性能也有一定提升。该功能无需在 Creator 中进行额外操作，导入图集后即可自动开启。</p><p>从 Cocos Creator 2.0.9 开始，支持将 Label 设为 CHAR 模式，即可实现类似的优化方案。能够以“字”为单位将文本缓存到全局共享的位图中，相同字体样式和字号的每个字符将在全局共享一份缓存。提升纹理利用率的同时，也大大提升了文本刷新时的性能。详见文档<a href="https://docs.cocos.com/creator/2.1/manual/zh/components/label.html#%E6%96%87%E6%9C%AC%E7%BC%93%E5%AD%98%E7%B1%BB%E5%9E%8B%EF%BC%88cache-mode%EF%BC%89" rel="external nofollow noopener noreferrer" target="_blank">[文本缓存类型]</a></p><p>从 Cocos Creator 2.1 开始，集成了压缩纹理支持，编辑器可设置不同平台所需格式，构建时将会自动进行压缩，支持 etc/pvr 的 alpha 通道分离。详见文档<a href="https://docs.cocos.com/creator/2.1/manual/zh/asset-workflow/compress-texture.html" rel="external nofollow noopener noreferrer" target="_blank">[压缩纹理]</a></p><p>从 Cocos Creator 2.0 开始，默认会在原生和 Web 平台上启用动态合图，该功能支持运行时根据渲染的先后顺序动态对纹理进行合并，降低 drawcall，用户无需对 z 进行手动指定。当 Label 启用了 BITMAP 模式后，会同时进入合批。详见文档<a href="https://docs.cocos.com/creator/manual/zh/advanced-topics/dynamic-atlas.html" rel="external nofollow noopener noreferrer" target="_blank">[动态合图]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.H5网页性能优化web服务开启gzip压缩，使用cnd加速下载。&lt;/p&gt;
&lt;p&gt;2.原生平台性能优化使用CocosCreator自带的自动图集配置，安卓使用Etc2格式，iOS使用PVRTC格式，能大幅度优化图片加载速度和内存占用。&lt;/p&gt;
&lt;p&gt;3.将频繁创建的对象使
      
    
    </summary>
    
      <category term="CocosCreator" scheme="https://g.cocos.dev/categories/CocosCreator/"/>
    
    
      <category term="性能优化" scheme="https://g.cocos.dev/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>开发中的一些实用脚本工具</title>
    <link href="https://g.cocos.dev/posts/32593/"/>
    <id>https://g.cocos.dev/posts/32593/</id>
    <published>2019-09-15T07:28:03.000Z</published>
    <updated>2022-01-20T14:24:47.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h1><p>1.cocos-sublime是cocosLua快速编译和启动。</p><p>2.ClearVS.bat是快速清理VS中间文件。</p><p>3.Copy.bat是快速拷贝源文件夹所有文件到目标目标文件夹。</p><p>4.DeleteGitFoldes.reg是快速清理git版本控制文件。</p><p>5.DeleteSvnFoldes.reg是快速清理svn版本控制文件。</p><p>6.icon大小转换.js是ps插件可以快速生成各种尺寸的图标。</p><p>7.图片压缩工具相关的下载链接。</p><p>8.build-mipsle.sh在linux环境下编译mipsle架构cpu可执行文件。</p><p>9.mysql快速安装和卸载等相关。</p><p>10.mongodb快速安装和卸载等相关。</p><p>11.obfuscator是js文件混淆加密。</p><p>12.lua-bindings是lua绑定环境配置。</p><p>13.PhysicsEditor-1.0.4物理形状编辑器。</p><p>14.Spine骨骼动画查看器。</p><p>15.JsonView是json编辑器。</p><p>16.Hash_1.0.4是文件md5检查工具。</p><p>17.PsQREdit是二维码信息编辑器。</p><p>18.TexturePackerC命令行打包图集。</p><p>19.Privoxy将socks5代理转成http代理。</p><p>20.Rime小狼毫个人配置文件。</p><p>21.IP_Messenger_v4.83飞鸽传书。</p><p>22.passwordGenerator随机密码生成器。</p><p>23.buildTools cocosCreator自动构建打包工具。</p><h4 id="项目代码https-github-com-dot123-Utilities-git"><a href="#项目代码https-github-com-dot123-Utilities-git" class="headerlink" title="项目代码https://github.com/dot123/Utilities.git"></a>项目代码<a href="https://github.com/dot123/Utilities.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/dot123/Utilities.git</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Utilities&quot;&gt;&lt;a href=&quot;#Utilities&quot; class=&quot;headerlink&quot; title=&quot;Utilities&quot;&gt;&lt;/a&gt;Utilities&lt;/h1&gt;&lt;p&gt;1.cocos-sublime是cocosLua快速编译和启动。&lt;/p&gt;
&lt;p&gt;2.
      
    
    </summary>
    
      <category term="工具" scheme="https://g.cocos.dev/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="脚本工具" scheme="https://g.cocos.dev/tags/%E8%84%9A%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Excel导表工具</title>
    <link href="https://g.cocos.dev/posts/55894/"/>
    <id>https://g.cocos.dev/posts/55894/</id>
    <published>2019-09-15T07:17:06.000Z</published>
    <updated>2022-02-26T09:05:18.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="excelTool"><a href="#excelTool" class="headerlink" title="excelTool"></a>excelTool</h1><p>1.excel导表工具支持导出txt、lua、json文件。</p><p>2.支持格式参考测试例子.xlsx。</p><p>3.开头#号注释。</p><p>4.config.json可以配置导出路径如不填则不导出该文件。</p><p>5.fileList方便读取所有导出的文件。</p><p>6.支持数据类型有int、 float、 string、 auto。</p><p>6.配置说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Config struct &#123;</span><br><span class="line">Configs      string</span><br><span class="line">Txt          string</span><br><span class="line">JSON         string</span><br><span class="line">Lua          string</span><br><span class="line">FieldLine    int    //字段key开始行</span><br><span class="line">DataLine     int    //有效配置开始行</span><br><span class="line">TypeLine     int    //类型配置开始行</span><br><span class="line">Comma        string //txt分隔符,默认是制表符</span><br><span class="line">Comment      string //excel注释符</span><br><span class="line">Linefeed     string //txt换行符</span><br><span class="line">UseSheetName bool   //使用工作表名为文件输出名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目代码https-github-com-dot123-excelTool-git"><a href="#项目代码https-github-com-dot123-excelTool-git" class="headerlink" title="项目代码https://github.com/dot123/excelTool.git"></a>项目代码<a href="https://github.com/dot123/excelTool.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/dot123/excelTool.git</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;excelTool&quot;&gt;&lt;a href=&quot;#excelTool&quot; class=&quot;headerlink&quot; title=&quot;excelTool&quot;&gt;&lt;/a&gt;excelTool&lt;/h1&gt;&lt;p&gt;1.excel导表工具支持导出txt、lua、json文件。&lt;/p&gt;
&lt;p&gt;2.支持
      
    
    </summary>
    
      <category term="go" scheme="https://g.cocos.dev/categories/go/"/>
    
    
      <category term="Excel导表" scheme="https://g.cocos.dev/tags/Excel%E5%AF%BC%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>CocosCreator帧同步</title>
    <link href="https://g.cocos.dev/posts/3013/"/>
    <id>https://g.cocos.dev/posts/3013/</id>
    <published>2019-09-15T06:33:42.000Z</published>
    <updated>2022-01-20T14:23:38.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浮点数处理"><a href="#浮点数处理" class="headerlink" title="浮点数处理"></a>浮点数处理</h3><p>1.JavaScript中的Number(double64)遵循IEEE754标准，现代cpu都遵循<a href="https://zh.wikipedia.org/wiki/IEEE_754" rel="external nofollow noopener noreferrer" target="_blank">IEEE_754标准</a>，误差是稳定的。</p><pre><code>console.log(0.1+0.2) //不同平台计算结果一样 0.30000000000000004 </code></pre><p>2.Math.PI和三角函数在不同平台上计算结果不同(iOS误差明显)，因此不能直接使用这些数学库，要使用查表法。</p><p>3.使用确定性随机数。</p><pre><code>function syncRand(seed) {    return function() {        seed = (seed * 9301 + 49297) % 233280;        return seed / 233280.0;    };}let rand = syncRand(18);console.log(rand());console.log(rand());console.log(rand());</code></pre><p>4.截断小数位数(不是必须的)。</p><p>5.要注意日志输出结果精度不高。</p><pre><code>console.log(0.1 + 0.2); //0.30000000000000004console.log(3.142) //网页输出3.142 原生平台输出3.1419999999999999//C++代码#include &lt;iostream&gt;int main(){    double a = 0.1;    double b = 0.2;    double c = 0.1 + 0.2;     std::cout &lt;&lt; c;     if (c == 0.30000000000000004) {         std::cout &lt;&lt; &quot;Hello World!\n&quot;;     }     return 0;}//输出：0.3Hello World!</code></pre><p>6.游戏过程中作弊检测。<br>玩家每隔一段时间把所有角色的关键数据加密为MD5上传服务器，服务器进行比对。如果是所有人上传上来的MD5都一样说明所有人的游戏结果都是同步的，如果有人修改了血量那么就会造成游戏不同步自己的MD5和其他人的不一样，服务器可以强行纠正它或者踢掉它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浮点数处理&quot;&gt;&lt;a href=&quot;#浮点数处理&quot; class=&quot;headerlink&quot; title=&quot;浮点数处理&quot;&gt;&lt;/a&gt;浮点数处理&lt;/h3&gt;&lt;p&gt;1.JavaScript中的Number(double64)遵循IEEE754标准，现代cpu都遵循&lt;a href=
      
    
    </summary>
    
      <category term="CocosCreator" scheme="https://g.cocos.dev/categories/CocosCreator/"/>
    
    
      <category term="帧同步" scheme="https://g.cocos.dev/tags/%E5%B8%A7%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>cocos2dx-lua集成sproto</title>
    <link href="https://g.cocos.dev/posts/5316/"/>
    <id>https://g.cocos.dev/posts/5316/</id>
    <published>2016-03-01T10:01:30.000Z</published>
    <updated>2022-01-20T14:07:29.625Z</updated>
    
    <content type="html"><![CDATA[<p>在cocos2d-x/external/lua目录下新建四个文件夹sproto，bitop，lpeg，lpack。然后将各自的文件放入其中，为了符合cocos2dx的规范，需要在bitop中建立一个bit.h文件，内容如下:</p><pre><code>#ifndef __LUA_BITOP_H_#define __LUA_BITOP_H_#if __cplusplusextern &quot;C&quot; {#endif#include &quot;lauxlib.h&quot;LUALIB_API int luaopen_bit(lua_State *L);#if __cplusplus}#endif#endif</code></pre><p>在lpeg中建立一个lpeg.h文件，内容如下:</p><pre><code>#ifndef __LUA_LPEG_H_#define __LUA_LPEG_H_#if __cplusplusextern &quot;C&quot; {#endif#include &quot;lpeg/lptypes.h&quot;#include &quot;lpeg/lpcap.h&quot;#include &quot;lpeg/lpcode.h&quot;#include &quot;lpeg/lpprint.h&quot;#include &quot;lpeg/lptree.h&quot;#include &quot;lpeg/lpvm.h&quot;int luaopen_lpeg(lua_State *L);#if __cplusplus}#endif#endif</code></pre><p>在sproto中建立一个lsproto.h文件，内容如下:</p><pre><code>#ifndef __LUA_LSPROTO_H_#define __LUA_LSPROTO_H_#if __cplusplusextern &quot;C&quot; {#endif#include &quot;lauxlib.h&quot;int luaopen_sproto_core(lua_State *L);#if __cplusplus}#endif#endif</code></pre><p>在lpack中建立一个lpack.h文件，内容如下:</p><pre><code>#ifndef __LUA_LPACK_H_#define __LUA_LPACK_H_#if __cplusplusextern &quot;C&quot; {#endif#include &quot;lauxlib.h&quot;int luaopen_pack(lua_State *L);#if __cplusplus}#endif#endif</code></pre><p>在cocos2d-x/cocos/scripting/lua-bindings/manual/network目录下，找到lua_extensions.c文件在头部包含所需文件</p><pre><code>#include &quot;sproto/lsproto.h&quot;#if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)#include &quot;bitop/bit.h&quot;#endif#include &quot;lpeg/lpeg.h&quot;#include &quot;lpack/lpack.h&quot;在luax_exts内，加入下列几行。  { &quot;sproto.core&quot;, luaopen_sproto_core },#if (CC_TARGET_PLATFORM != CC_PLATFORM_ANDROID)  { &quot;bit&quot;, luaopen_bit },#endif  { &quot;lpeg&quot;, luaopen_lpeg },  { &quot;string&quot;, luaopen_pack },</code></pre><p>Android支持</p><p>在cocos2d-x/cocos/scripting/lua-bindings/proj.android目录下，打开 Android.mk 文件，在那一长串加载c文件后面，加入我们需要的c文件</p><pre><code>../../../../external/lua/lpeg/lpcap.c \../../../../external/lua/lpeg/lpcode.c \../../../../external/lua/lpeg/lpprint.c \../../../../external/lua/lpeg/lptree.c \../../../../external/lua/lpeg/lpvm.c \../../../../external/lua/sproto/lsproto.c \../../../../external/lua/sproto/sproto.c \../../../../external/lua/lpack/lpack.c </code></pre><p>Android支持luajit库，里面已经包含了bit库，所以不用加bit.c了，不然编译的时候会出现多重定义的错误</p><p>总得来说还是很简单的，只需三步：<br>  文件放到cocos2d-x/external/lua目录下<br>  修改lua_extensions.c，包含相关文件<br>  修改Android.mk做Android支持</p><h4 id="项目代码https-github-com-dot123-cocos2d-lua-sproto-git"><a href="#项目代码https-github-com-dot123-cocos2d-lua-sproto-git" class="headerlink" title="项目代码https://github.com/dot123/cocos2d-lua-sproto.git"></a>项目代码<a href="https://github.com/dot123/cocos2d-lua-sproto.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/dot123/cocos2d-lua-sproto.git</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在cocos2d-x/external/lua目录下新建四个文件夹sproto，bitop，lpeg，lpack。然后将各自的文件放入其中，为了符合cocos2dx的规范，需要在bitop中建立一个bit.h文件，内容如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifndef _
      
    
    </summary>
    
      <category term="Cocos2dx" scheme="https://g.cocos.dev/categories/Cocos2dx/"/>
    
    
      <category term="sproto" scheme="https://g.cocos.dev/tags/sproto/"/>
    
  </entry>
  
  <entry>
    <title>lua-bindings环境配置</title>
    <link href="https://g.cocos.dev/posts/26463/"/>
    <id>https://g.cocos.dev/posts/26463/</id>
    <published>2016-03-01T09:45:55.000Z</published>
    <updated>2022-01-20T14:17:19.259Z</updated>
    
    <content type="html"><![CDATA[<p>1.下载<a href="https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi" rel="external nofollow noopener noreferrer" target="_blank">python2.7</a>安装它并设置 C:\Python27\ 和 C:\Python27\Scripts 到 path 环境变量中。</p><p>2.安装 Cheetah<br>打开 cmd 执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Cheetah</span><br></pre></td></tr></table></figure><p>3.安装 PyYAML<br>打开 cmd 执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyYAML</span><br></pre></td></tr></table></figure><p>4.下载<a href="https://developer.android.com/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">android-ndk-r10d</a>并设置 NDK_ROOT 环境变量。</p><p>5.进入到 cocos2d-x/tools/tolua 文件夹，运行 genbindings.py 自动生成代码到 cocos\scripting\auto-generated\lua-bindings。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.下载&lt;a href=&quot;https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;pyth
      
    
    </summary>
    
      <category term="Cocos2dx" scheme="https://g.cocos.dev/categories/Cocos2dx/"/>
    
    
      <category term="lua-bindings" scheme="https://g.cocos.dev/tags/lua-bindings/"/>
    
  </entry>
  
  <entry>
    <title>VS2015自动添加头部注释</title>
    <link href="https://g.cocos.dev/posts/4710/"/>
    <id>https://g.cocos.dev/posts/4710/</id>
    <published>2016-03-01T09:00:31.000Z</published>
    <updated>2018-09-02T06:26:19.015Z</updated>
    
    <content type="html"><![CDATA[<p>让VS自动生成类的头部注释，只需修改C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\ItemTemplatesCache\CSharp\Code\2052\Class路径下的Class.cs文件<br>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#region 模块信息</span><br><span class="line">/*----------------------------------------------------------------</span><br><span class="line">// 模块名：$safeitemname$</span><br><span class="line">// 创建者：conjurer</span><br><span class="line">// 修改者列表：</span><br><span class="line">// 创建日期：$time$</span><br><span class="line">// 模块描述：</span><br><span class="line">//----------------------------------------------------------------*/</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">$if$ ($targetframeworkversion$ &gt;= 3.5)using System.Linq;</span><br><span class="line">$endif$</span><br><span class="line">$if$ ($targetframeworkversion$ &gt;= 4.5)using System.Threading.Tasks;</span><br><span class="line">$endif$</span><br><span class="line">namespace Dot123</span><br><span class="line">&#123;</span><br><span class="line">public class $safeitemrootname$</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;让VS自动生成类的头部注释，只需修改C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\ItemTemplatesCache\CSharp\Code\2052\Class路径下的Class.cs文件
      
    
    </summary>
    
      <category term="Unity" scheme="https://g.cocos.dev/categories/Unity/"/>
    
    
      <category term="vs2015" scheme="https://g.cocos.dev/tags/vs2015/"/>
    
  </entry>
  
  <entry>
    <title>cocos2dx中随机数生成的各种方法比较</title>
    <link href="https://g.cocos.dev/posts/25106/"/>
    <id>https://g.cocos.dev/posts/25106/</id>
    <published>2016-02-25T14:37:20.000Z</published>
    <updated>2019-09-21T14:43:21.349Z</updated>
    
    <content type="html"><![CDATA[<h5 id="测试代码如下："><a href="#测试代码如下：" class="headerlink" title="测试代码如下："></a>测试代码如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#define RANGE 200</span><br><span class="line">//1.</span><br><span class="line">//随机效果一般，每次进入游戏的时候，值都是一样的</span><br><span class="line">float randData = CCRANDOM_0_1() * RANGE;</span><br><span class="line">CCLOG(&quot;1st-------------&gt;%f&quot;, randData);</span><br><span class="line"></span><br><span class="line">//2.</span><br><span class="line">//随机效果不好，虽然每次进入游戏，值都不一样，但是生成的随机数是递增的，而且相邻两个数之间的变化不大</span><br><span class="line">srand(unsigned(time(NULL)));</span><br><span class="line">randData = rand() % RANGE;</span><br><span class="line">CCLOG(&quot;2rd-------------&gt;%f&quot;, randData);</span><br><span class="line"></span><br><span class="line">//3.</span><br><span class="line">//随机效果较好，每次进入游戏的值都不一样，生成的随机数无规律，相邻的两个数变化较大</span><br><span class="line">timeval tv;</span><br><span class="line">cocos2d::gettimeofday(&amp;tv, NULL);</span><br><span class="line">unsigned long int seed = tv.tv_sec * 1000 + tv.tv_usec / 1000;</span><br><span class="line">srand(seed);</span><br><span class="line">randData = rand() % RANGE;</span><br><span class="line">CCLOG(&quot;3nd-------------&gt;%f&quot;, randData);</span><br><span class="line"></span><br><span class="line">//4.</span><br><span class="line">//C++11的特性，要包含头文件&lt;random&gt;，随机效果不错</span><br><span class="line">std::uniform_real_distribution&lt;double&gt; u(0, RANGE);</span><br><span class="line">std::default_random_engine e(rand());</span><br><span class="line">for (int i = 0; i &lt; 5; i++)&#123;</span><br><span class="line">CCLOG(&quot;4th-------------&gt;%f&quot;, u(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;测试代码如下：&quot;&gt;&lt;a href=&quot;#测试代码如下：&quot; class=&quot;headerlink&quot; title=&quot;测试代码如下：&quot;&gt;&lt;/a&gt;测试代码如下：&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="Cocos2dx" scheme="https://g.cocos.dev/categories/Cocos2dx/"/>
    
    
      <category term="cocos2dx" scheme="https://g.cocos.dev/tags/cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>iOS9http不能正常使用的解决办法</title>
    <link href="https://g.cocos.dev/posts/40531/"/>
    <id>https://g.cocos.dev/posts/40531/</id>
    <published>2016-02-23T06:11:23.000Z</published>
    <updated>2019-09-21T14:32:45.490Z</updated>
    
    <content type="html"><![CDATA[<p>1.在Info.plist中添加NSAppTransportSecurity类型Dictionary。</p><p>2.在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean值设为YES。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在Info.plist中添加NSAppTransportSecurity类型Dictionary。&lt;/p&gt;
&lt;p&gt;2.在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean值设为YES。&lt;/p&gt;

      
    
    </summary>
    
      <category term="iOS" scheme="https://g.cocos.dev/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://g.cocos.dev/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>hexo菜鸟教程</title>
    <link href="https://g.cocos.dev/posts/65318/"/>
    <id>https://g.cocos.dev/posts/65318/</id>
    <published>2016-02-21T13:09:20.000Z</published>
    <updated>2016-02-22T13:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先登陆<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">github</a>网站，在<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">github</a>上建立一个repository，名字必须为xxx.github.io，xxx为你的账户名</p><p>打开控制台，用npm安装hexo（这里需要先安装node.js，如果没有安装的话请先去官网安装）。</p><pre><code>npm i -g hexo</code></pre><p>安装完成后查看</p><pre><code>hexo -v</code></pre><p>如果出现版本信息表示安装成功</p><h3 id="创建一个hexo项目"><a href="#创建一个hexo项目" class="headerlink" title="创建一个hexo项目"></a>创建一个hexo项目</h3><p>现在在本地创建一个hexo项目，在项目文件夹下进入cmd命令行模式，输入：</p><pre><code>hexo init</code></pre><p>创建完成后，输入：</p><pre><code>npm install</code></pre><p>安装默认插件完成后，为了支持github，还需要安装另一个插件：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后生成web项目，输入：</p><pre><code>hexo g</code></pre><p>启动服务器预览效果，输入：</p><pre><code>hexo s -o</code></pre><p>浏览器预览访问<a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a></p><p>这还只是本地项目，现在要发布到github上面去，我们需要配置项目目录下的_config.yml文件，打开它找到最后一行，我们把github的配置信息填上去。</p><pre><code>deploy:  type: git  repo: git@github.com:dot123/dot123.github.io.git  branch: master</code></pre><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>生成SSH密钥<a href="https://help.github.com/articles/generating-an-ssh-key/" rel="external nofollow noopener noreferrer" target="_blank">点击查看</a></p><p>在<a href="https://github.com/settings/ssh" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>上添加SSH密钥<br>打开id_rsa.pub，复制全文。点击<a href="https://github.com/settings/ssh" rel="external nofollow noopener noreferrer" target="_blank">Add SSH key</a>，粘贴进去。</p><p>完成后我们开始发布博客吧！当前路径命令行下输入：</p><pre><code>hexo d</code></pre><p>按照提示输入github的登录名和密码，就可以看到成功信息。</p><p>稍等一会就可以输入网址xxx.github.io访问你的博客啦~~~</p><h3 id="hexo目录结构"><a href="#hexo目录结构" class="headerlink" title="hexo目录结构"></a>hexo目录结构</h3><pre><code>.├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json全局配置 _config.yml# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #站点信息title:  #标题subtitle:  #副标题description:  #站点描述，给搜索引擎看的author:  #作者email:  #电子邮箱language: zh-CN #语言# URL #链接格式url:  #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮  enable: true #是否启用  line_number: true #显示行号  tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy:  type: git  repo: 刚刚github创库地址.git  branch: master</code></pre><p>注意</p><pre><code>配置文件的冒号“:”后面有一个空格repo: 刚刚github创库地址.git</code></pre><h3 id="hexo命令行使用"><a href="#hexo命令行使用" class="headerlink" title="hexo命令行使用"></a>hexo命令行使用</h3><pre><code>常用命令：hexo help #查看帮助hexo init #初始化一个目录hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件hexo server #本地预览，&apos;Ctrl+C&apos;关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</code></pre><p>简写：</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>新建文章</p><pre><code>hexo new &quot;标题&quot;</code></pre><p>在 _posts 目录下会生成文件标题.md</p><pre><code>title: Hello Worlddate: 2015-07-30 07:56:29 #发表日期，一般不改动categories: hexo #文章文类tags: [hexo,github] #文章标签，多于一项时用这种格式---正文，使用Markdown语法书写</code></pre><p>编辑完后保存，hexo server 预览</p><p>hexo部署</p><p>执行下列指令即可完成部署</p><pre><code>hexo generatehexo deploy</code></pre><p>以下提示说明部署成功</p><pre><code>[info] Deploy done: git</code></pre><h3 id="sitemap-amp-rss"><a href="#sitemap-amp-rss" class="headerlink" title="sitemap &amp; rss"></a>sitemap &amp; rss</h3><h4 id="设置sitemap"><a href="#设置sitemap" class="headerlink" title="设置sitemap"></a>设置sitemap</h4><p>1.安装hexo的sitemap网站地图生成插件</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><p>2.在你的hexo站点的_config.yml添加下面的代码</p><pre><code># hexo sitemap网站地图sitemap:    path: sitemap.xmlbaidusitemap:    path: baidusitemap.xml</code></pre><p>配置成功后，hexo编译时会在hexo站点根目录生成sitemap.xml和baidusitemap.xml<br>其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。</p><h4 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h4><p>NexT中RSS有三个设置选项，满足特定的使用场景。更改主题配置文件，设定rss字段的值：<br>false：禁用RSS，不在页面上显示RSS连接。<br>留空：使用 Hexo生成的Feed链接。你可以需要先安装hexo-generator-feed插件。<br>具体的链接地址：适用于已经烧制过 Feed 的情形<br>hexo-generator-feed插件安装命令</p><pre><code>npm install hexo-generator-feed --save</code></pre><h3 id="主题首页title的优化"><a href="#主题首页title的优化" class="headerlink" title="主题首页title的优化"></a>主题首页title的优化</h3><p>更改index.swig文件，文件路径是your-hexo-site\themes\next\layout，将下面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>这时候你的首页标题会更符合网站名称 - 网站描述这习惯。<br>进阶，做了seo优化，把关键词也显示在Title标题里，可改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>注意：别堆砌关键字，整个标题一般不超过80个字符，可以通过chinaz的seo综合查询检查。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h
      
    
    </summary>
    
      <category term="hexo" scheme="https://g.cocos.dev/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://g.cocos.dev/tags/hexo/"/>
    
  </entry>
  
</feed>
